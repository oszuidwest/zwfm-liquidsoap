name: CI
on:
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Run all linting checks
  lint:
    uses: ./.github/workflows/lint.yml
    permissions:
      contents: read

  # Build Docker image to ensure it compiles
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get versions
        id: versions
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          LIQUIDSOAP_VERSION=$(gh api repos/savonet/liquidsoap/releases/latest --jq '.tag_name' | sed 's/v//')
          ODR_RELEASES=$(gh api repos/oszuidwest/zwfm-odrbuilds/releases)
          ODR_AUDIOENC_VERSION=$(echo "$ODR_RELEASES" | jq -r 'map(select(.tag_name | startswith("odr-audioenc"))) | max_by(.created_at) | .tag_name' | sed 's/odr-audioenc-v//')
          
          echo "liquidsoap_version=$LIQUIDSOAP_VERSION" >> $GITHUB_OUTPUT
          echo "odr_audioenc_version=$ODR_AUDIOENC_VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          build-args: |
            LIQUIDSOAP_VERSION=${{ steps.versions.outputs.liquidsoap_version }}
            ODR_AUDIOENC_VERSION=${{ steps.versions.outputs.odr_audioenc_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Run formatting on successful main branch pushes
  format:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [lint, build]
    uses: ./.github/workflows/format.yml
    permissions:
      contents: write

  # Summary job for branch protection
  ci-status:
    name: CI Status
    runs-on: ubuntu-latest
    needs: [lint, build]
    if: always()
    steps:
      - name: Summary
        run: |
          if [ "${{ needs.lint.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
            echo "All CI checks passed!"
            exit 0
          else
            echo "CI checks failed"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Build: ${{ needs.build.result }}"
            exit 1
          fi